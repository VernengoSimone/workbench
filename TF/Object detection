{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Object detection","private_outputs":true,"provenance":[{"file_id":"https://github.com/tensorflow/hub/blob/master/examples/colab/object_detection.ipynb","timestamp":1616336744447}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"iVDxSpgmSMxB"},"source":["import os\n","import subprocess\n","import sys\n","from google.colab import drive, files\n","\n","%tensorflow_version 2.x\n","%load_ext tensorboard\n","import tensorflow as tf\n"," \n","workspace_dir = \"/content/drive/MyDrive/Colab Notebooks/Thesis/workspace/test_inference\"\n","\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6cPY9Ou4sWs_","cellView":"code"},"source":["# For running inference on the TF-Hub module.\n","import tensorflow as tf\n","\n","# For downloading the image.\n","import matplotlib.pyplot as plt\n","\n","# For drawing onto the image.\n","import numpy as np\n","import pandas as pd\n","import re\n","import cv2\n","from google.colab.patches import cv2_imshow\n","\n","# For measuring the inference time.\n","import time\n","\n","# Print Tensorflow version\n","print(tf.__version__)\n","\n","# Check available GPU devices.\n","print(\"The following GPU devices are available: %s\" % tf.test.gpu_device_name())\n","\n","os.chdir(workspace_dir)\n","detector = tf.saved_model.load(\"/content/drive/MyDrive/Colab Notebooks/Thesis/workspace/training/pre-trained-models/ssdfpn640/exported_model/saved_model\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VSHR0_UmO-x7"},"source":["def load_files(prefix, suffix):\n","  files = []\n","\n","  for string in os.listdir():\n","    if string.startswith(prefix) and string.endswith(suffix):\n","      files.append({\"id\": int(re.findall(r'\\d+', string)[0]), \"file\": string})\n","\n","  df = pd.DataFrame(files)\n","  return df.sort_values(by = [\"id\"]).reset_index(drop = True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"r3HZicQLrTuJ"},"source":["def plot_out(filename, size = (int(300 * 1.78), 300), display = False, save = False):\n","  os.chdir(workspace_dir)\n","  image = np.asarray(tf.keras.preprocessing.image.load_img(filename))\n","  image = tf.expand_dims(image, 0)\n","  detections = detector(image)\n","  bboxes = detections['detection_boxes'][0, :10, :].numpy()\n","  scores = detections[\"detection_scores\"].numpy()[0]\n","\n","  filt_bboxes = np.zeros(bboxes.shape)\n","  for i in range(bboxes.shape[0]):\n","    if scores[i] < 0.3:\n","      filt_bboxes[i] = [-1, -1, -1, -1]\n","      continue\n","    for j in range(bboxes.shape[1]):\n","      if bboxes[i, j] < 0:\n","        filt_bboxes[i, j] = 0\n","      elif bboxes[i, j] > 1:\n","        filt_bboxes[i, j] = 1\n","      else:\n","        filt_bboxes[i, j] = bboxes[i, j]\n","\n","  width = size[0]\n","  height = size[1]\n","\n","  img = cv2.imread(filename)\n","  img = cv2.resize(img, (width, height))\n","\n","  i = 0\n","  j = 1\n","  for box in filt_bboxes:\n","    if np.array_equal(box, [-1, -1, -1, -1]):\n","      i += 1\n","      continue\n","    cv2.rectangle(img, (int(box[1] * width), int(box[0] * height)), (int(box[3] * width), int(box[2] * height)), (0, 255, 0), 2)\n","    cv2.rectangle(img, (int(box[1] * width) - 1, int(box[0] * height) - 22), (int(box[1] * width) + 15, int(box[0] * height) - 1), (0, 255, 0), -1)\n","    cv2.putText(img, str(j), (int(box[1] * width) + 1, int(box[0] * height) - 7), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,0), 2)\n","    cv2.rectangle(img, (width - 76, 21 * (j-1)), (width, 21 * j), (0, 255, 0), -1)\n","    cv2.putText(img, str(j) + \": \" + str(round(scores[i], 3)), (width - 73, 19 * j), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,0), 2)\n","    i += 1\n","    j += 1\n","    \n","  if display: cv2_imshow(img)\n","  if save:\n","    print(save)\n","    cv2.imwrite(\"new_\" + filename, img)\n","\n","  return filt_bboxes\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jZNkui4DgQmV"},"source":["def plot_sort(filename, trkname, size = (int(300 * 1.78), 300), display = True, save = False):\n","  trk = pd.read_json(trkname, orient = \"index\").to_numpy()\n","  width = size[0]\n","  height = size[1]\n","  img = cv2.imread(filename)\n","  img = cv2.resize(img, (width, height))\n","\n","  i = 0\n","  j = 1\n","  for box in trk:\n","    if np.array_equal(box, [-1, -1, -1, -1]):\n","      i += 1\n","      continue\n","    cv2.rectangle(img, (int(box[1] * width), int(box[0] * height)), (int(box[3] * width), int(box[2] * height)), (0, 255, 0), 2)\n","    cv2.rectangle(img, (int(box[1] * width) - 1, int(box[0] * height) - 22), (int(box[1] * width) + 15 + 9 * (len(str(int(box[4]))) - 1), int(box[0] * height) - 1), (0, 255, 0), -1)\n","    cv2.putText(img, str(int(box[4])), (int(box[1] * width ) + 1, int(box[0] * height)-7), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,0), 2)\n","    i += 1\n","    j += 1\n","\n","  if display: cv2_imshow(img)\n","  if save: cv2.imwrite(\"new_\" + filename, img)\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7VXFrkAkdHLo"},"source":["Print the detections to json, the files are then processed with a script."]},{"cell_type":"code","metadata":{"id":"8Cu4GxoCYsse"},"source":["i = 0\n","for path in load_files(\"vlcsnap\", \".png\")[\"file\"]:\n","  i += 1\n","  detections = plot_out(path, size = (int(300 * 1.78), 300), display = False)\n","  detections = pd.DataFrame(detections)\n","  detections.columns = [\"x1\", \"y1\", \"x2\", \"y2\"]\n","  detections.to_json(\"test (\" + str(i) + \"}.json\", orient = \"index\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qaJmIQ5UdNjJ"},"source":["The script produces a set of trackers, in the following cell we represent the results overlayed to the images."]},{"cell_type":"code","metadata":{"id":"9u7o1UFzdNM4"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nOf5zYB-jU4U"},"source":["test = load_files(\"vlcsnap\", \".png\")[\"file\"][::2]\n","trk = load_files(\"trk (\", \".json\")[\"file\"]\n","\n","'''\n","for test_file, trk_file in zip(test, trk):\n","  plot_sort(test_file, trk_file, save = True, display = False)\n","'''"],"execution_count":null,"outputs":[]}]}